{
    "docs": [
        {
            "location": "/", 
            "text": "\ufeffsiddhi-io-http\n\n\n\n\nNew version of Siddhi v4.0.0 is built in Java 8.\n\n\nThis is a http input and output extension for siddhi source and sink implementation. This extension only works inside \nthe WSO2 Data Analytic Server and cannot be run with standalone siddhi.\nThis component allow us to receive and publish events through http and https transports.\n\n\nFeatures Supported\n\n\n\n\nhttp source\n   -- Multiple sources can be defined and receive http messages to the DAS server.\n\n\nhttps source\n   -- Multiple sources can be defined and receive https messages to the DAS server.\n\n\nhttp sink \n   -- Multiple sinks can be defined and publish event to the http endpoints.\n\n\nhttps sink \n   -- Multiple sinks can be defined and publish event to the https endpoints using custom client trusts-store.\n\n\nbasic authentication\n\n\ncomponent able provide basic authentication.\n\n\nprocess event with order preserving\n   -- component capable of preserving the event order in http source\n\n\n\n\nPrerequisites for using the feature\n\n\n\n\nSiddhi Stream should be defined\n\n\nIf user need to put custom configurations parameters he/she can put those parameters in deployment yml\n\n\n\n\nsiddhi:\n\n\n extensions:\n\n   -extension:\n    name: 'http'\n    namespace: 'source'\n    properties:\n      latency.metrics.enabled: true\n      server.bootstrap.socket.timeout: 15\n      client.bootstrap.socket.timeout: 15\n      server.bootstrap.worker.group.size: 8\n      server.bootstrap.boss.group.size: 4\n      default.host: 0.0.0.0\n      default.port: 9763\n      default.scheme: http\n      default.keyStoreFile: ''\n      default.keyStorePass: ''\n      default.certPass: ''\n      https.host: 0.0.0.0\n      https.port: 9763\n      https.scheme: https\n      https.keystore.file: ${carbon.home}/resources/security/wso2carbon.jks\n      https.keyStore.pass: wso2carbon\n\n   -extension:\n    name: 'http'\n    namespace: 'sink'\n    properties:\n      latency.metrics.enabled: true\n      server.bootstrap.socket.timeout: 15\n      client.bootstrap.socket.timeout: 15\n      server.bootstrap.worker.group.size: 8\n      server.bootstrap.boss.group.size: 4\n      default.host: 0.0.0.0\n      default.port: 9763\n      default.scheme: http\n      default.key.store.file: ''\n      default.key.store.pass: ''\n      default.cert.pass: ''\n      https.host: 0.0.0.0\n      https.port: 9763\n      https.scheme: https\n      https.truststore.file: ${carbon.home}/resources/security/client-truststore.jks\n      https.truststore.pass: wso2carbon\n      https.certPass: wso2carbon\n\n\n\nDeploying the feature\n\n\nFeature can be deploy as a OSGI bundle by putting jar file of component to DAS_HOME/lib directory of DAS 4.0.0 pack. \n\n\nExample Siddhi Queries\n\n\nEvent Source\n\n\n @source(type='http', @map(type='text'),\n receiver.url='http://localhost:8080/streamName', is.basic.auth.enabled='true')\n define stream inputStream (name string, age int, country string);\n\n\n\nEvent Sink\n\n\n @sink(type='http',publisher.url='http://localhost:8009', method='{{method}}',headers='{{headers}}', \n @map(type='xml' , @payload('{{payloadBody}}')))\n define stream FooStream (method string, headers string);\"\n\n\n\nDocumentation\n\n\n\n\nhttps://docs.wso2.com/display/DAS400/Configuring+HTTP+Event+Sinks\n\n\nhttps://docs.wso2.com/display/DAS400/Configuring+HTTP+Event+Sources\n\n\n\n\nHow to Contribute\n\n\n\n\nSend your bug fixes pull requests to [master branch] (https://github.com/wso2-extensions/siddhi-io-http/tree/master) \n\n\n\n\nContact us\n\n\nSiddhi developers can be contacted via the mailing lists:\n  * Carbon Developers List : dev@wso2.org\n  * Carbon Architecture List : architecture@wso2.org\n\n\nWe welcome your feedback and contribution.\n\n\nWSO2 Smart Analytics Team.\n\n\nAPI Docs:\n\n\n\n\n1.0.1-SNAPSHOT", 
            "title": "Welcome to WSO2 Siddhi IO TCP"
        }, 
        {
            "location": "/#siddhi-io-http", 
            "text": "", 
            "title": "\ufeffsiddhi-io-http"
        }, 
        {
            "location": "/#new-version-of-siddhi-v400-is-built-in-java-8", 
            "text": "This is a http input and output extension for siddhi source and sink implementation. This extension only works inside \nthe WSO2 Data Analytic Server and cannot be run with standalone siddhi.\nThis component allow us to receive and publish events through http and https transports.", 
            "title": "New version of Siddhi v4.0.0 is built in Java 8."
        }, 
        {
            "location": "/#features-supported", 
            "text": "http source\n   -- Multiple sources can be defined and receive http messages to the DAS server.  https source\n   -- Multiple sources can be defined and receive https messages to the DAS server.  http sink \n   -- Multiple sinks can be defined and publish event to the http endpoints.  https sink \n   -- Multiple sinks can be defined and publish event to the https endpoints using custom client trusts-store.  basic authentication  component able provide basic authentication.  process event with order preserving\n   -- component capable of preserving the event order in http source", 
            "title": "Features Supported"
        }, 
        {
            "location": "/#prerequisites-for-using-the-feature", 
            "text": "Siddhi Stream should be defined  If user need to put custom configurations parameters he/she can put those parameters in deployment yml   siddhi:   extensions:\n\n   -extension:\n    name: 'http'\n    namespace: 'source'\n    properties:\n      latency.metrics.enabled: true\n      server.bootstrap.socket.timeout: 15\n      client.bootstrap.socket.timeout: 15\n      server.bootstrap.worker.group.size: 8\n      server.bootstrap.boss.group.size: 4\n      default.host: 0.0.0.0\n      default.port: 9763\n      default.scheme: http\n      default.keyStoreFile: ''\n      default.keyStorePass: ''\n      default.certPass: ''\n      https.host: 0.0.0.0\n      https.port: 9763\n      https.scheme: https\n      https.keystore.file: ${carbon.home}/resources/security/wso2carbon.jks\n      https.keyStore.pass: wso2carbon\n\n   -extension:\n    name: 'http'\n    namespace: 'sink'\n    properties:\n      latency.metrics.enabled: true\n      server.bootstrap.socket.timeout: 15\n      client.bootstrap.socket.timeout: 15\n      server.bootstrap.worker.group.size: 8\n      server.bootstrap.boss.group.size: 4\n      default.host: 0.0.0.0\n      default.port: 9763\n      default.scheme: http\n      default.key.store.file: ''\n      default.key.store.pass: ''\n      default.cert.pass: ''\n      https.host: 0.0.0.0\n      https.port: 9763\n      https.scheme: https\n      https.truststore.file: ${carbon.home}/resources/security/client-truststore.jks\n      https.truststore.pass: wso2carbon\n      https.certPass: wso2carbon", 
            "title": "Prerequisites for using the feature"
        }, 
        {
            "location": "/#deploying-the-feature", 
            "text": "Feature can be deploy as a OSGI bundle by putting jar file of component to DAS_HOME/lib directory of DAS 4.0.0 pack.", 
            "title": "Deploying the feature"
        }, 
        {
            "location": "/#example-siddhi-queries", 
            "text": "", 
            "title": "Example Siddhi Queries"
        }, 
        {
            "location": "/#event-source", 
            "text": "@source(type='http', @map(type='text'),\n receiver.url='http://localhost:8080/streamName', is.basic.auth.enabled='true')\n define stream inputStream (name string, age int, country string);", 
            "title": "Event Source"
        }, 
        {
            "location": "/#event-sink", 
            "text": "@sink(type='http',publisher.url='http://localhost:8009', method='{{method}}',headers='{{headers}}', \n @map(type='xml' , @payload('{{payloadBody}}')))\n define stream FooStream (method string, headers string);\"", 
            "title": "Event Sink"
        }, 
        {
            "location": "/#documentation", 
            "text": "https://docs.wso2.com/display/DAS400/Configuring+HTTP+Event+Sinks  https://docs.wso2.com/display/DAS400/Configuring+HTTP+Event+Sources", 
            "title": "Documentation"
        }, 
        {
            "location": "/#how-to-contribute", 
            "text": "Send your bug fixes pull requests to [master branch] (https://github.com/wso2-extensions/siddhi-io-http/tree/master)", 
            "title": "How to Contribute"
        }, 
        {
            "location": "/#contact-us", 
            "text": "Siddhi developers can be contacted via the mailing lists:\n  * Carbon Developers List : dev@wso2.org\n  * Carbon Architecture List : architecture@wso2.org", 
            "title": "Contact us"
        }, 
        {
            "location": "/#we-welcome-your-feedback-and-contribution", 
            "text": "WSO2 Smart Analytics Team.", 
            "title": "We welcome your feedback and contribution."
        }, 
        {
            "location": "/#api-docs", 
            "text": "1.0.1-SNAPSHOT", 
            "title": "API Docs:"
        }, 
        {
            "location": "/license/", 
            "text": "Copyright (c) 2017 WSO2 Inc. (\nhttp://www.wso2.org\n) All Rights Reserved.\n\n\nWSO2 Inc. licenses this file to you under the Apache License,\nVersion 2.0 (the \"License\"); you may not use this file except\nin compliance with the License.\nYou may obtain a copy of the License at\n\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\n\nUnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, either express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\n\n\n-------------------------------------------------------------------------\n                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \nLicense\n shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \nLicensor\n shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \nLegal Entity\n shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \ncontrol\n means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \nYou\n (or \nYour\n) shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \nSource\n form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \nObject\n form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \nWork\n shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \nDerivative Works\n shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \nContribution\n shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \nsubmitted\n\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \nNot a Contribution.\n\n\n   \nContributor\n shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \nNOTICE\n text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \nAS IS\n BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS", 
            "title": "License"
        }, 
        {
            "location": "/api/1.0.1-SNAPSHOT/", 
            "text": "API Docs\n\n\nSource\n\n\nhttp \n(Source)\n\n\nThe HTTP source receives POST requests via HTTP or HTTPS in format such as \ntext\n, \nXML\n and \nJSON\n. If required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service.\n\n\n\nSyntax\n\n\n@source(type=\nhttp\n, receiver.url=\nSTRING\n, basic.auth.enabled=\nSTRING\n, worker.count=\nSTRING\n, @map(...)))\n\n\n\n\nQuery Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nreceiver.url\n\n        \nThe URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format \nhttp://0.0.0.0:9763/\nappNAme\n/\nstreamName\nIf the user want to use SSL the url should be given in following format \nhttps://localhost:8080/\nstreamName\n\n        \nhttp://0.0.0.0:9763/\n/\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nbasic.auth.enabled\n\n        \nIf this is set to \ntrue\n, basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false' \n\n        \nfalse\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nworker.count\n\n        \nThe number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering.\n\n        \n1\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nlatency.metrics.enabled\n\n        \nProperty to enable metrics logs to monitor transport latency for netty.\n\n        \ntrue\n\n        \ntrue\nfalse\n\n    \n\n    \n\n        \nserver.bootstrap.socket.timeout\n\n        \nproperty to configure specified timeout in milliseconds which server socket will block for this amount of time for http message content to be received.\n\n        \n15\n\n        \nAny integer\n\n    \n\n    \n\n        \nclient.bootstrap.socket.timeout\n\n        \nproperty to configure specified timeout in milliseconds which client socket will block for this amount of time for http message content to be received\n\n        \n15\n\n        \nAny integer\n\n    \n\n    \n\n        \nserver.bootstrap.boss.group.size\n\n        \nproperty to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads.\n\n        \n4\n\n        \nAny integer\n\n    \n\n    \n\n        \nserver.bootstrap.worker.group.size\n\n        \nproperty to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode.\n\n        \n8\n\n        \nAny integer\n\n    \n\n    \n\n        \ndefault.host\n\n        \nThe default host.\n\n        \n0.0.0.0\n\n        \nAny valid host\n\n    \n\n    \n\n        \ndefault.port\n\n        \nThe default port.\n\n        \n9763\n\n        \nAny valid port\n\n    \n\n    \n\n        \ndefault.protocol\n\n        \nThe default protocol.\n\n        \nhttp\n\n        \nhttp\nhttps\n\n    \n\n    \n\n        \nhttps.keystore.file\n\n        \nThe default keystore file path.\n\n        \n${carbon.home}/resources/security/wso2carbon.jks\n\n        \nPath to wso2carbon.jks file\n\n    \n\n    \n\n        \nhttps.keystore.password\n\n        \nThe default keystore password.\n\n        \nwso2carbon\n\n        \nString of keystore password\n\n    \n\n    \n\n        \nhttps.cert.password\n\n        \nThe default cert password.\n\n        \nwso2carbon\n\n        \nString of cert password\n\n    \n\n\n\n\n\nExamples\n\n\nExample 1\n\n\n@source(type='http', receiver.url='http://localhost:9055/endpoints/RecPro', @map(type='xml'))\ndefine stream FooStream (symbol string, price float, volume long);\n\n\n\n\n\nAbove source configuration performs a default XML input mapping. The expected input is as follows:\nevents\nevent\nsymbol\nWSO2\n/symbol\nprice\n55.6\n/price\nvolume\n100\n/volume\n/event\n/events\nIf basic authentication is enabled via the \nbasic.auth.enabled='true\n setting, each input event is also expected to contain the \nAuthorization:'Basic encodeBase64(username:Password)'\n header.\n\n\n\nSink\n\n\nhttp \n(Sink)\n\n\nThis extension publish the HTTP events in any HTTP method  POST, GET, PUT, DELETE  via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically.\n\n\n\nSyntax\n\n\n@sink(type=\nhttp\n, publisher.url=\nSTRING\n, basic.auth.username=\nSTRING\n, basic.auth.password=\nSTRING\n, client.truststore.path=\nSTRING\n, client.truststore.password=\nSTRING\n, headers=\nSTRING\n, method=\nSTRING\n, @map(...)))\n\n\n\n\nQuery Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npublisher.url\n\n        \nThe URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use \nhttps\n instead of \nhttp\n in the publisher.url.e.g., \nhttp://localhost:8080/endpoint\n, \nhttps://localhost:8080/endpoint\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbasic.auth.username\n\n        \nThe username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI.\n\n        \n \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nbasic.auth.password\n\n        \nThe password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI.\n\n        \n \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.truststore.path\n\n        \nThe file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required.\n\n        \n${carbon.home}/resources/security/client-truststore.jks\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.truststore.password\n\n        \nThe password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password.\n\n        \nwso2carbon\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheaders\n\n        \nThe headers that should be included as a HTTP request headers. There can be any number of headers concatenated on following format. header1:value1#header2:value2. User can include content-type header if he need to any specific type for payload if not system get the mapping type as the content-Type header (ie. @map(xml):application/xml,@map(json):application/json,@map(text):plain/text ) and if user does not include any mapping type then system gets the 'plain/text' as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it as content-length header.\n\n        \n \n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \nmethod\n\n        \nFor HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header.\n\n        \nPOST\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nlatency.metrics.enabled\n\n        \nProperty to enable metrics logs to monitor transport latency for netty.\n\n        \ntrue\n\n        \nAny Integer\n\n    \n\n    \n\n        \nserver.bootstrap.socket.timeout\n\n        \nProperty to configure specified timeout in milliseconds which server socket will block for this amount of time for http message content to be received.\n\n        \n15\n\n        \nAny Integer\n\n    \n\n    \n\n        \nclient.bootstrap.socket.timeout\n\n        \nproperty to configure specified timeout in milliseconds which client socket will block for this amount of time for http message content to be received.\n\n        \n15\n\n        \nAny Integer\n\n    \n\n    \n\n        \nserver.bootstrap.boss.group.size\n\n        \nProperty to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads.\n\n        \n4\n\n        \nAny integer\n\n    \n\n    \n\n        \nserver.bootstrap.worker.group.size\n\n        \nProperty to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode.\n\n        \n8\n\n        \nAny integer\n\n    \n\n    \n\n        \ndefault.host\n\n        \nThe default host.\n\n        \n0.0.0.0\n\n        \nAny Valid host\n\n    \n\n    \n\n        \ndefault.port\n\n        \nThe default port.\n\n        \n9763\n\n        \nInteger Port\n\n    \n\n    \n\n        \ndefault.protocol\n\n        \nThe default protocol.\n\n        \nhttp\n\n        \nhttp\nhttps\n\n    \n\n    \n\n        \nhttps.truststore.file\n\n        \nThe default truststore file path.\n\n        \n${carbon.home}/resources/security/client-truststore.jks\n\n        \nPath to client-truststore.jks\n\n    \n\n    \n\n        \nhttps.truststore.password\n\n        \nThe default truststore password.\n\n        \nwso2carbon\n\n        \nTruststore password\n\n    \n\n\n\n\n\nExamples\n\n\nExample 1\n\n\n@sink(type='http',publisher.url='http://localhost:8009/foo', method='{{method}}',headers='{{headers}}', @map(type='xml' , @payload('{{payloadBody}}')))define stream FooStream (payloadBody String, method string, headers string);\n\n\n\n\n\nIf it is xml mapping expected input should be in following format for FooStream:{\nevents\n    \nevent\n        \nsymbol\nWSO2\n/symbol\n        \nprice\n55.6\n/price\n        \nvolume\n100\n/volume\n    \n/event\n/events\n,POST,Content-Length:24#Content-Location:USA#Retry-After:120}Above event will generate output as below.~Output http event payload\nevents\nevent\nsymbol\nWSO2\n/symbol\nprice\n55.6\n/price\nvolume\n100\n/volume\n/event\n/events\n~Output http event headersContent-Length:24,Content-Location:'USA',Retry-After:120,Content-Type:'application/xml',HTTP_METHOD:'POST',~Output http event propertiesHTTP_METHOD:'POST',HOST:'localhost',PORT:8009PROTOCOL:'http'TO:'/foo'", 
            "title": "1.0.1-SNAPSHOT"
        }, 
        {
            "location": "/api/1.0.1-SNAPSHOT/#api-docs", 
            "text": "", 
            "title": "API Docs"
        }, 
        {
            "location": "/api/1.0.1-SNAPSHOT/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/1.0.1-SNAPSHOT/#http-source", 
            "text": "The HTTP source receives POST requests via HTTP or HTTPS in format such as  text ,  XML  and  JSON . If required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service.", 
            "title": "http (Source)"
        }, 
        {
            "location": "/api/1.0.1-SNAPSHOT/#syntax", 
            "text": "@source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= STRING , @map(...)))", 
            "title": "Syntax"
        }, 
        {
            "location": "/api/1.0.1-SNAPSHOT/#query-parameters", 
            "text": "Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         receiver.url \n         The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format  http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format  https://localhost:8080/ streamName \n         http://0.0.0.0:9763/ / \n         STRING \n         Yes \n         No \n     \n     \n         basic.auth.enabled \n         If this is set to  true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false'  \n         false \n         STRING \n         Yes \n         No \n     \n     \n         worker.count \n         The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. \n         1 \n         STRING \n         Yes \n         No", 
            "title": "Query Parameters"
        }, 
        {
            "location": "/api/1.0.1-SNAPSHOT/#system-parameters", 
            "text": "Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         latency.metrics.enabled \n         Property to enable metrics logs to monitor transport latency for netty. \n         true \n         true false \n     \n     \n         server.bootstrap.socket.timeout \n         property to configure specified timeout in milliseconds which server socket will block for this amount of time for http message content to be received. \n         15 \n         Any integer \n     \n     \n         client.bootstrap.socket.timeout \n         property to configure specified timeout in milliseconds which client socket will block for this amount of time for http message content to be received \n         15 \n         Any integer \n     \n     \n         server.bootstrap.boss.group.size \n         property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. \n         4 \n         Any integer \n     \n     \n         server.bootstrap.worker.group.size \n         property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. \n         8 \n         Any integer \n     \n     \n         default.host \n         The default host. \n         0.0.0.0 \n         Any valid host \n     \n     \n         default.port \n         The default port. \n         9763 \n         Any valid port \n     \n     \n         default.protocol \n         The default protocol. \n         http \n         http https \n     \n     \n         https.keystore.file \n         The default keystore file path. \n         ${carbon.home}/resources/security/wso2carbon.jks \n         Path to wso2carbon.jks file \n     \n     \n         https.keystore.password \n         The default keystore password. \n         wso2carbon \n         String of keystore password \n     \n     \n         https.cert.password \n         The default cert password. \n         wso2carbon \n         String of cert password", 
            "title": "System Parameters"
        }, 
        {
            "location": "/api/1.0.1-SNAPSHOT/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/api/1.0.1-SNAPSHOT/#example-1", 
            "text": "@source(type='http', receiver.url='http://localhost:9055/endpoints/RecPro', @map(type='xml'))\ndefine stream FooStream (symbol string, price float, volume long);  Above source configuration performs a default XML input mapping. The expected input is as follows: events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events If basic authentication is enabled via the  basic.auth.enabled='true  setting, each input event is also expected to contain the  Authorization:'Basic encodeBase64(username:Password)'  header.", 
            "title": "Example 1"
        }, 
        {
            "location": "/api/1.0.1-SNAPSHOT/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/1.0.1-SNAPSHOT/#http-sink", 
            "text": "This extension publish the HTTP events in any HTTP method  POST, GET, PUT, DELETE  via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically.", 
            "title": "http (Sink)"
        }, 
        {
            "location": "/api/1.0.1-SNAPSHOT/#syntax_1", 
            "text": "@sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , client.truststore.path= STRING , client.truststore.password= STRING , headers= STRING , method= STRING , @map(...)))", 
            "title": "Syntax"
        }, 
        {
            "location": "/api/1.0.1-SNAPSHOT/#query-parameters_1", 
            "text": "Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         publisher.url \n         The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use  https  instead of  http  in the publisher.url.e.g.,  http://localhost:8080/endpoint ,  https://localhost:8080/endpoint \n         \n         STRING \n         No \n         No \n     \n     \n         basic.auth.username \n         The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. \n           \n         STRING \n         Yes \n         No \n     \n     \n         basic.auth.password \n         The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. \n           \n         STRING \n         Yes \n         No \n     \n     \n         client.truststore.path \n         The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. \n         ${carbon.home}/resources/security/client-truststore.jks \n         STRING \n         Yes \n         No \n     \n     \n         client.truststore.password \n         The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. \n         wso2carbon \n         STRING \n         Yes \n         No \n     \n     \n         headers \n         The headers that should be included as a HTTP request headers. There can be any number of headers concatenated on following format. header1:value1#header2:value2. User can include content-type header if he need to any specific type for payload if not system get the mapping type as the content-Type header (ie. @map(xml):application/xml,@map(json):application/json,@map(text):plain/text ) and if user does not include any mapping type then system gets the 'plain/text' as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it as content-length header. \n           \n         STRING \n         Yes \n         Yes \n     \n     \n         method \n         For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. \n         POST \n         STRING \n         Yes \n         Yes", 
            "title": "Query Parameters"
        }, 
        {
            "location": "/api/1.0.1-SNAPSHOT/#system-parameters_1", 
            "text": "Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         latency.metrics.enabled \n         Property to enable metrics logs to monitor transport latency for netty. \n         true \n         Any Integer \n     \n     \n         server.bootstrap.socket.timeout \n         Property to configure specified timeout in milliseconds which server socket will block for this amount of time for http message content to be received. \n         15 \n         Any Integer \n     \n     \n         client.bootstrap.socket.timeout \n         property to configure specified timeout in milliseconds which client socket will block for this amount of time for http message content to be received. \n         15 \n         Any Integer \n     \n     \n         server.bootstrap.boss.group.size \n         Property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. \n         4 \n         Any integer \n     \n     \n         server.bootstrap.worker.group.size \n         Property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. \n         8 \n         Any integer \n     \n     \n         default.host \n         The default host. \n         0.0.0.0 \n         Any Valid host \n     \n     \n         default.port \n         The default port. \n         9763 \n         Integer Port \n     \n     \n         default.protocol \n         The default protocol. \n         http \n         http https \n     \n     \n         https.truststore.file \n         The default truststore file path. \n         ${carbon.home}/resources/security/client-truststore.jks \n         Path to client-truststore.jks \n     \n     \n         https.truststore.password \n         The default truststore password. \n         wso2carbon \n         Truststore password", 
            "title": "System Parameters"
        }, 
        {
            "location": "/api/1.0.1-SNAPSHOT/#examples_1", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/api/1.0.1-SNAPSHOT/#example-1_1", 
            "text": "@sink(type='http',publisher.url='http://localhost:8009/foo', method='{{method}}',headers='{{headers}}', @map(type='xml' , @payload('{{payloadBody}}')))define stream FooStream (payloadBody String, method string, headers string);  If it is xml mapping expected input should be in following format for FooStream:{ events      event          symbol WSO2 /symbol          price 55.6 /price          volume 100 /volume      /event /events ,POST,Content-Length:24#Content-Location:USA#Retry-After:120}Above event will generate output as below.~Output http event payload events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events ~Output http event headersContent-Length:24,Content-Location:'USA',Retry-After:120,Content-Type:'application/xml',HTTP_METHOD:'POST',~Output http event propertiesHTTP_METHOD:'POST',HOST:'localhost',PORT:8009PROTOCOL:'http'TO:'/foo'", 
            "title": "Example 1"
        }
    ]
}